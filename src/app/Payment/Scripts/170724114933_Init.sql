 

CREATE TABLE [dbo].[Deposit] (
    [Id] [bigint] NOT NULL IDENTITY,
    [TransactionSignature] [nvarchar](max) NOT NULL,
    [Amount] [bigint] NOT NULL,
    [IsBankDeposit] [bit] NOT NULL,
    [UpdatedAt] [datetime] NOT NULL,
    [CreatedAt] [datetime] NOT NULL,
    [TransactionHeight] [bigint] NOT NULL,
    [Status] [int] NOT NULL,
    [Network] [int] NOT NULL,
    [UserName] [nvarchar](50) NOT NULL,
    CONSTRAINT [PK_dbo.Deposit] PRIMARY KEY ([Id])
)
CREATE TABLE [dbo].[TransactionLog] (
    [Id] [bigint] NOT NULL IDENTITY,
	[MessageId] [nvarchar](255) NOT NULL,
	[Network] [int] NOT NULL,
	[UserName] [nvarchar](50) NOT NULL,
	[LogEventType] [int] NOT NULL,
    [Amount] [bigint] NOT NULL,
    [Balance] [bigint] NOT NULL,
    [CreatedAt] [datetime] NOT NULL
    CONSTRAINT [PK_dbo.TransactionLog] PRIMARY KEY ([Id])
)
GO
CREATE UNIQUE INDEX [IX_MessageId] ON [dbo].[TransactionLog]([MessageId])
GO
CREATE TABLE [dbo].[UserWithdraws] (
    [Id] [bigint] NOT NULL IDENTITY,
    [Network] [int] NOT NULL,
    [ToAddress] [nvarchar](255) NOT NULL,
    [Amount] [bigint] NOT NULL,
    [CreatedAt] [datetime] NOT NULL,
    [UpdatedAt] [datetime] NOT NULL,
    [TransactionSignature] [nvarchar](255),
    [TransactionHeight] [bigint] NOT NULL,
    [Status] [int] NOT NULL,
    [UserName] [nvarchar](50) NOT NULL,
    CONSTRAINT [PK_dbo.UserWithdraws] PRIMARY KEY ([Id])
)
CREATE TABLE [dbo].[DividendWithdraws] (
    [Id] [bigint] NOT NULL IDENTITY,
    [Network] [int] NOT NULL,
    [ToAddress] [nvarchar](255) NOT NULL,
    [Amount] [bigint] NOT NULL,
    [CreatedAt] [datetime] NOT NULL,
    [UpdatedAt] [datetime] NOT NULL,
    [TransactionSignature] [nvarchar](255),
    [TransactionHeight] [bigint] NOT NULL,
    [Status] [int] NOT NULL,
    [WithdrawType] [int] NOT NULL,
    CONSTRAINT [PK_dbo.DividendWithdraws] PRIMARY KEY ([Id])
)
CREATE TABLE [dbo].[__MigrationHistory] (
    [MigrationId] [nvarchar](150) NOT NULL,
    [ContextKey] [nvarchar](300) NOT NULL,
    [Model] [varbinary](max) NOT NULL,
    [ProductVersion] [nvarchar](32) NOT NULL,
    CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY ([MigrationId], [ContextKey])
)


CREATE TYPE [dbo].[TransactionLog] AS TABLE(
	[MessageId] [nvarchar](255) NOT NULL,
	[Network] [int] NOT NULL,
	[UserName] [nvarchar](50) NULL,
	[Amount] [bigint] NOT NULL,
	[LogEventType] [int] NOT NULL,
	[CreatedAt] [datetime] NOT NULL
)
GO

CREATE OR ALTER  PROCEDURE [dbo].[MergeTransactionLog]
(
	@TransactionLogs AS [dbo].[TransactionLog] READONLY
)
AS

BEGIN TRY
	BEGIN TRANSACTION

	DECLARE @R1 TABLE(
		Id BIGINT,
		Network INT,
		UserName nvarchar(50),
		Balance bigint
	)

	DECLARE @O1 TABLE(
		Network INT,
		UserName nvarchar(50),
		Balance bigint
	)

	INSERT INTO @R1
	SELECT tl.Id, tl.Network, tl.UserName, tl.Balance FROM (
		SELECT MAX(Id) as Id, Network, UserName FROM dbo.TransactionLog
		GROUP BY Network, UserName ) as g
		JOIN dbo.TransactionLog tl 
		ON tl.Id = g.Id
		JOIN @TransactionLogs tls ON tls.Network = tl.Network AND tls.UserName = tl.UserName
 
	INSERT INTO [dbo].[TransactionLog] (MessageId, Network, UserName, Amount, Balance, LogEventType, CreatedAt)
	OUTPUT INSERTED.Network, INSERTED.UserName, INSERTED.Balance INTO @O1(Network, UserName, Balance)
		SELECT tl.MessageId, tl.Network, tl.UserName, tl.Amount, 
		(COALESCE(r1.Balance, 0) + tl.Amount) as Balance,
		tl.LogEventType, tl.CreatedAt FROM @TransactionLogs tl
		FULL OUTER JOIN @R1 r1
		ON tl.Network = r1.Network AND tl.UserName = r1.UserName
	

	SELECT Network, UserName,Balance FROM @O1
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
	DECLARE @ErrorMessage NVARCHAR(4000);  
    DECLARE @ErrorSeverity INT;  
    DECLARE @ErrorState INT;  
    SELECT   
        @ErrorMessage = ERROR_MESSAGE(),  
        @ErrorSeverity = ERROR_SEVERITY(),  
        @ErrorState = ERROR_STATE();  
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
END CATCH

GO

CREATE OR ALTER PROCEDURE [dbo].[LoadTransactionBalances]
 
AS

BEGIN

	SELECT DISTINCT tl.Id, tl.Network, tl.UserName, tl.Balance FROM (
		SELECT MAX(Id) as Id, Network, UserName FROM dbo.TransactionLog
		GROUP BY Network, UserName ) as g
	JOIN dbo.TransactionLog tl 
	ON tl.Id = g.Id
	

END

GO

CREATE OR ALTER PROCEDURE [dbo].[CalculateDividend]
(
	@Network INT,
	@BankUserName NVARCHAR(50),
	@Rate BIGINT
)
AS
BEGIN
	
	DECLARE @Treshold BIGINT
	DECLARE @BankBalance BIGINT -- GameBalance
	DECLARE @UsersBalance BIGINT
	DECLARE @Spendable BIGINT
	DECLARE @Total BIGINT

	 
		SELECT DISTINCT tl.Id, tl.Network, tl.UserName, tl.Balance 
		INTO #Balances FROM (
			SELECT MAX(Id) as Id, Network, UserName FROM dbo.TransactionLog
			WHERE Network = @Network
			GROUP BY Network, UserName ) as g
			JOIN dbo.TransactionLog tl 
			ON tl.Id = g.Id
			WHERE tl.Network = @Network
	 
	
    SELECT @Treshold = Treshold FROM dbo.Account WHERE UserName LIKE @BankUserName -- GDZIE NETWORK ???
	SELECT @BankBalance = Balance FROM #Balances WHERE UserName LIKE @BankUserName
	SELECT @Total = SUM(Balance)  FROM #Balances

	SET @Spendable = @BankBalance - @Treshold

	DECLARE @Dividend BIGINT = @Spendable / @Rate
	DECLARE @Profit BIGINT = @Spendable - @Dividend

	SELECT ISNULL(@Spendable,0) AS Spendable, ISNULL(@Profit, 0) AS Profit, ISNULL(@Dividend, 0) AS Dividend, ISNULL(@Total, 0) AS Total

END


INSERT [dbo].[__MigrationHistory]([MigrationId], [ContextKey], [Model], [ProductVersion])
VALUES (N'201707240955087_AutomaticMigration', N'GreedyGames.Transactions.Migrations.Configuration',  0x1F8B0800000000000400ED5BCD72DB3610BE77A6EFC0E1A99D4944D9AED3C4232523CB76EAA9FFC6B2933344AE648E49502540C77AB61EFA487D852E241204418AA428CA76524F7230C1C507E0DB1F808BD5BF7FFFD3FBF4E87BC60384CC0D68DFDCE9744D03A81D382E9DF6CD884FDEBE373F7DFCF9A7DEB1E33F1A5F12B93D21873D29EB9B779CCF0E2C8BD977E013D6F15D3B0C5830E11D3BF02DE204D66EB7FBC1DAD9B100214CC4328CDE7544B9EBC3E2011F8701B561C623E29D070E782C6EC737A305AA71417C60336243DFFC1C0238F3CFA2A1731312CA88CD714EACB3E86A1A03CF2538AB117813D32094069C88F707B70C463C0CE87434C306E2DDCC67807213E23188D772908AD75D5677572CCB4A3B265076C478E0AF09B8B317F364E9DD1BB16D4A1E91C963649CCFC5AA176CF6CD239805CCE5A6A18F7530F4422157C2352A8C87F810B3DE89B1DE18D53DDE482B426313FFDE18C3C8E351087D0A11CA786F8CAB68ECB9F69F30BF09EE81F669E479EA5A7035F82ED3804D5761308390CFAF6112AFF0D4310D2BDBCFD23BCA6E4A9FE5E24F297FF79B695CE0E064EC81341585A8110F42F80C1442C2C1B9229C434805062CC8CE8DAE8DA5103472A794081292D1D156D1054DE39C3C9E019DF2BBBE897F9AC689FB084ED212CFE896BAE8B1D889871114CCB87C16033F406FAC5A7539C6293B24F45E5AD412EA30083C20746DB0DB9923E81C48A0237CBCC170B136D2308496901455FD01EEF46E43BE4668401193BAC658B5F096A4794DB40BE0DF82F03E0327DBD6259F4128FE2AB1C3FDEEE666D8B3D278541AA514E2CF82692BC12A0BF91AB3D68A596D448B43E211DCF0370341D51D3FE09C0546C6F2B32F9E2D623CB153D6DD1C1A39E15797DF3921F9D68AFB2560DB743C6330660B8478D93FA023B6695F37C1C0714260ACC4C076F7F75FEAE9A33DA76DEFE8B1E6D9AE2EBBDFCD29A5766C39721F5C3479A7D518A3836E35D61C12060A457221A5DC2652B9ED2BFBA21D8EC5FED12ABF2AE0CBE3F6D9CFB091AF9D6013973965271E99A66987964EB34BF8AD2AE2963A107A73E4514694BD5D4D0DE7E08F218C977D85EEB760FD0BF1227CEEE6A24D461C673871431F1CD961A7BCC309713D457A37AF9BA5164A3423B7CB666A19DD91109C580D315656074B89A7E3FCE4FAF8B82EE15F075F8E4775C95E08DFE0FFB443B701E1D9A3F9169C411DE065B98398C55960DFD755CF357880B12FD7AD425142FEAB4B57B945F1AC04F9B1FC5E85972E4E5A03DB5E1EDAE24EBF95779269A1587CBFC2D6E44615CBBFAB602AF0BC315128FABD5C1E378B89329BF715938F4F1252FE43BDD96795564FD9C57D771A385AF610B10547530778598EA6A9B782F99C7A6BB22DF67DB138E25289A5AC1C3F1B88780D8F45F9753C9FC48CB3C2EFD325FC0878D681F0FC901E38E20391F42DAB1C229BF32A42D2136D158089011441A51E5C745C92B4A5B73CD6F29A27B90EB256DC07F5CEC96C8696A0DC0FC52DC6687939347C3B5AFFA6C45F6258362BB83091B39523E1673B9982F6561C601C387143C685EEC744F8D9D0F173622B8C6405D9C9A09A1DE8D98B54034907F1771CE24BEFCBA401699029B527B85A1FB7D4C5C241CE2C0DEBB99E8B6B3BE291B0203B320CBCC8A7AB322C65BD8B3FA855BC6289FA2324A908153369AB8FA25D8564169C7D551F53494BA8784A737D2C2559A26229CD8D7492E41B562824795D1F3BF964520193B6FA28F288AFC2C8C63534203F29330A90AD79A49EA53990EEB456CE6BB56CA31E056AC5083DD0B7182AB41D62FD885105B09DC0D18E5BCB3B0B154636D6C7C97E02A960D937CFE3D0FF3B77498F316DEEA97A4AB3C1E6AA41E4E6B79AFBCDBCA52D0B50AE14325B42DAFCD41EDCA69FB4B9216FFF60F3F2B7E9ECF7AA8A957DD37EDCD8CCD33389F5F5BD5CEDFEEAE1AF1EFE037BF80B3B11E49211BA881C5D2625B4E4432F4E045457ACE632034B11D3408AC42E1F229F73C6C1EF0881CEE82F6FE8B9204C3F113827D49D00E3CBC498B9DBDDD9D50A5D5F4ED1A9C598E3D5AB3C7DF2AA8CB13B7505AF95A5172D5EF6D30712DA7724FCC5278FBF6E581E91CCBF8DEACCB1BB3E50AE3C423CF2562A331B23ADAC79684856B6E8A109825699D30442BFC14E8C287787BD9522CB1FC62F5BF11EAD5AB1214A51B962139CF61C678B669A8B751BD41E969C91BF67D36C81FD5CD55E61945854963D87DFB467A9ED6D3B7536EA32F6362AC27BB60DE98977938ADCD5ABD7BE7AEDABD7562314558856E3947BA95EB290BFB45E9135D74B795617222C3F6E51DBE30067BD9C67B32A851A450A4583AD59C8903D5FE487D4DE178DA889540C980F8F056CE6650A79CD8B35ACB8C827337A96FA23DDDE1130743D09217EB24B6141720A9AC89CD249901833AE5B9D5122A2D9FA397082E1810C42EE4E5077F8DAC610A9D68F1EFB63704EE965C467111F3006FED8CBFC48A267958FBF282BC9CEB977395B6473DB58024ED31511EE921E46AE9716149D14F8E80A08E18DF16625421D179BD6742E912E025A1328A60FDD0E8D437C74803FF3108C5DD21179802673431B3F8329B1E7494E6A3548B522B2B4F78E5C320D89CF628CB43F3EA20D3BFEE3C7FF00FEC299E1AB3E0000 , N'6.1.3-40302')

